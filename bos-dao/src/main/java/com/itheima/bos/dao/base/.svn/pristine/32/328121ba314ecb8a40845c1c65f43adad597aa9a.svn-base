package com.itheima.bos.dao.base.impl;

import com.itheima.bos.dao.base.IBaseDao;
import org.hibernate.SessionFactory;
import org.springframework.context.annotation.ImportResource;
import org.springframework.orm.hibernate5.support.HibernateDaoSupport;

import javax.annotation.Resource;
import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;

/**
 *  持久层通用实现
 * @param <T>
 */
public class BaseDaoImpl<T> extends HibernateDaoSupport implements IBaseDao<T> {
    // 代表某个实体类的类型
    private Class<T> entityClass;

    @Resource
    public void setMySessionFactory(SessionFactory sessionFactory){
        super.setSessionFactory(sessionFactory);
    }

    // 在父类的（BaseDaoImpl）的构造方法中动态获得entityClass
    public BaseDaoImpl() {
        ParameterizedType superClass = (ParameterizedType) this.getClass().getGenericSuperclass();
        // 获得父类上声明的泛型数组
        Type[] actualTypeArguments = superClass.getActualTypeArguments();
        entityClass = (Class<T>) actualTypeArguments[0];
    }

    @Override
    public void save(T entity) {
        this.getHibernateTemplate().save(entity);
    }

    @Override
    public void update(T entity) {
        this.getHibernateTemplate().update(entity);
    }

    @Override
    public void delete(T entity) {
        this.getHibernateTemplate().delete(entity);
    }

    @Override
    public T findById(Serializable id) {

        return this.getHibernateTemplate().get(entityClass,id);
    }

    @Override
    public List<T> findAll() {
        List<T> lists = this.getHibernateTemplate().findByExample(null);
//        String sql = "from "+entityClass.getSimpleName();
//        return (List<T>) this.getHibernateTemplate().find(sql);
        return lists;
    }
}
